import math

import matplotlib.pyplot as plt
import pandas as pd

from household_contact_tracing.views.simulation_view import SimulationView
from household_contact_tracing.network import Network, NodeType
from household_contact_tracing.simulation_model import SimulationModel
from household_contact_tracing.views.colors import node_colours


class TimelineGraphView(SimulationView):
    """ Timeline View: A really simple proof-of-concept, could be used as a template.
        Shows how views are now decoupled from model code and each other.
    """

    def __init__(self, controller, model: SimulationModel):
        # Viewers own copies of controller and model (MVC pattern)
        # ... but controller not required yet (no input collected from view)
        # self.controller = controller
        self.model = model

        self.df_node_type_counts = pd.DataFrame(columns=[node.name for node in NodeType])

        # Register as observer
        self.model.register_observer_simulation_stopped(self)
        self.model.register_observer_step_increment(self)

    def set_display(self, show: bool):
        if show:
            self.model.register_observer_simulation_stopped(self)
            self.model.register_observer_step_increment(self)
        else:
            self.model.remove_observer_graph_change(self)
            self.model.remove_observer_step_increment(self)

    def model_param_change(self, subject: SimulationModel):
        """ Respond to parameter change(s) """
        pass

    def model_state_change(self, subject: SimulationModel):
        """ Respond to changes in model state (e.g. running, extinct, timed-out) """
        pass

    def graph_change(self, subject: SimulationModel):
        """ Respond to changes in graph (nodes/households network) """
        pass

    def model_step_increment(self, subject: SimulationModel):
        """ Respond to single step increment in simulation """
        self.increment_timeline(subject.network)

    def model_simulation_stopped(self, subject: SimulationModel):
        self.draw_timeline(subject.network)

    def draw_timeline(self, network: Network):
        """ Draws the timeline graph, generated by the model."""
        colours = {node.name: colour.colour for node, colour in node_colours.items()}
        if len(self.df_node_type_counts.index):
            axes = self.df_node_type_counts.plot(subplots=True, legend=False,
                                                 color=colours, figsize=(6, 14),
                                                 layout=(math.ceil(len(colours)/2), 2),
                                                 ylim=(0, self.df_node_type_counts.to_numpy().max()))
            for index, node_colour in enumerate(list(node_colours.values())):
                axes[index // 2][index % 2].set_title(node_colour.label)
            plt.tight_layout()
            plt.show()

    def increment_timeline(self, network):
        self.df_node_type_counts = self.df_node_type_counts.append({node.name: network.count_nodes(node) for node in NodeType}, ignore_index=True)
