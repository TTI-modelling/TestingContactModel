# Code to visualise networks derived from the model
from dataclasses import dataclass

import matplotlib.pyplot as plt
from matplotlib.patches import Circle
from matplotlib.lines import Line2D
import networkx as nx

from household_contact_tracing.simulation_view_interface import SimulationViewInterface
from household_contact_tracing.network import Network
from household_contact_tracing.simulation_model_interface import SimulationModelInterface


@dataclass
class EdgeColour:
    color: str
    label: str


@dataclass
class NodeColour:
    colour: str
    label: str


class GraphView(SimulationViewInterface):
    """Graph View"""

    edge_colours = {'default': EdgeColour("black", "Transmission, yet to be traced"),
                    'within_house': EdgeColour("blue", "Within household contact tracing"),
                    'between_house': EdgeColour("magenta", "Between household contact tracing"),
                    'failed_contact_tracing': EdgeColour("red", "Failed contact trace"),
                    'app_traced': EdgeColour("green", "App traced edge")
                    }

    node_colours = {'default': NodeColour("lightgrey", "Default"),
                    'isolated': NodeColour('yellow', "Isolating"),
                    'had_contacts_traced': NodeColour("orange", "Had contacts traced"),
                    'symptomatic_will_report_infection': NodeColour('lime', "Symptomatic, will report"),
                    'symptomatic_will_not_report_infection': NodeColour('green', "Symptomatic, will not report"),
                    'received_pos_test_pcr': NodeColour('grey', "Received positive PCR"),
                    'received_neg_test_pcr': NodeColour('deeppink', "Received negative PCR"),
                    'confirmatory_pos_pcr_test': NodeColour('turquoise', "Positive confirmatory PCR"),
                    'confirmatory_neg_pcr_test': NodeColour('tomato', "Negative confirmatory PCR"),
                    'received_pos_test_lfa': NodeColour('pink', "Positive LFA"),
                    'being_lateral_flow_tested_isolated': NodeColour('blue', "Being LFT and isolating"),
                    'being_lateral_flow_tested_not_isolated': NodeColour('orange', "Being LFT and not isolating")
                    }

    def __init__(self, controller, model: SimulationModelInterface):
        # Viewers own copies of controller and model (MVC pattern)
        # ... but controller not required yet (no input collected from view)
        # self.controller = controller
        self.model = model

        # Register as observer
        self.model.register_observer_state_change(self)
        self.model.register_observer_simulation_stopped(self)

    def set_show_all_graphs(self, show_all):
        if show_all:
            self.model.register_observer_graph_change(self)
        else:
            self.model.remove_observer_graph_change(self)

    def model_simulation_stopped(self, subject: SimulationModelInterface):
        print('graph view observed that simulation has stopped running')
        if self not in subject._observers_graph_change:
            self.draw_network(subject.network)

    def graph_change(self, subject: SimulationModelInterface):
        """ Respond to changes in graph (nodes/households network) """
        print('graph view observed that graph changed')
        self.draw_network(subject.network)

    def draw_network(self, network: Network):
        """Draws the network generated by the model."""

        node_colour_map = [self.node_colours[node.node_type()].colour for node
                           in network.all_nodes()]

        edge_colour_map = [self.edge_colours[network.graph.edges[edge]["edge_type"]].color
                           for edge in network.graph.edges()]
        node_labels = {node.node_id: node.household_id for node in network.all_nodes()}

        plt.figure(figsize=(10, 10))

        nx.draw(network.graph, node_size=150, alpha=0.75, node_color=node_colour_map,
                edge_color=edge_colour_map, labels=node_labels)
        plt.title("Household Branching Process with Contact Tracing")

        ax = plt.gca()
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.7, box.height])

        # Legend for edge colours
        lines = [Line2D([0, 1], [0, 1], color=clr.color, lw=1) for clr
                 in self.edge_colours.values()]
        labels = [value.label for value in self.edge_colours.values()]
        first_legend = plt.legend(lines, labels, loc="upper left", bbox_to_anchor=(1, 1),
                                  title="Edges")
        plt.gca().add_artist(first_legend)

        # Legend for node colours
        circles = [Circle((0, 0), color=clr.colour, lw=1) for clr in self.node_colours.values()]
        labels = [value.label for value in self.node_colours.values()]
        plt.legend(circles, labels, loc="upper left", bbox_to_anchor=(1, 0.85), title="Nodes")

        plt.show()
