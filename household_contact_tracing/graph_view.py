# Code to visualise networks derived from the model
from typing import Callable

import matplotlib.pyplot as plt
import networkx as nx
from matplotlib.lines import Line2D

from household_contact_tracing.simulation_view_interface import SimulationViewInterface
from household_contact_tracing.network import Node, NodeCollection
from household_contact_tracing.bp_simulation_model import BPSimulationModel

contact_traced_edge_colour_within_house = "blue"
contact_traced_edge_between_house = "magenta"
default_edge_colour = "black"
failed_contact_tracing = "red"
app_traced_edge = "green"


def make_proxy(clr, **kwargs):
    """Used to draw the lines we use in the draw network legend.

    Arguments:
        clr {str} -- the colour of the line to be drawn.

    Returns:
        Line2D -- A Line2D object to be passed to the
    """
    return Line2D([0, 1], [0, 1], color=clr, **kwargs)


class GraphView(SimulationViewInterface):
    '''
        Graph View
    '''

    edge_type_colours = {}
    edge_type_colours['within_house'] = "blue"
    edge_type_colours['between_house'] = "magenta"
    edge_type_colours['default'] = "black"
    edge_type_colours['failed_contact_tracing'] = "red"
    edge_type_colours['app_traced'] = "green"

    node_type_colours = {}
    node_type_colours['default'] = 'white'
    node_type_colours['isolated_only'] = 'yellow'
    node_type_colours['had_contacts_traced'] = 'orange'
    node_type_colours['symptomatic_will_report_infection'] = 'lime'
    node_type_colours['symptomatic_will_not_report_infection'] = 'green'

    node_type_colours['received_pos_test_pcr'] = 'grey'
    node_type_colours['received_neg_test_pcr'] = 'deeppink'
    node_type_colours['confirmatory_pos_pcr_test'] = 'turquoise'
    node_type_colours['confirmatory_neg_pcr_test'] = 'tomato'
    node_type_colours['received_pos_test_lfa'] = 'pink'
    node_type_colours['being_lateral_flow_tested_isolated'] = 'blue'
    node_type_colours['being_lateral_flow_tested_not_isolated'] = 'orange'
    node_type_colours['isolated_only'] = 'yellow'
    node_type_colours['symptomatic_will_report_infection'] = 'lime'
    node_type_colours['symptomatic_will_not_report_infection'] = 'green'

    def __init__(self, controller, model):
        # Viewers own copies of controller and model (MVC pattern)
        self.controller = controller
        self.model = model

        # Register as observer
        model.register_observer_graph_change(self)

    def update_graph_change(self, subject: BPSimulationModel):
        """ Respond to changes in graph (nodes/households network) """
        print('graph view observed that graph changed')
        self.draw_network(subject.nodes, subject.node_type)


    def draw_network(self, nodes: NodeCollection, node_type: Callable[[Node], str]):
        """Draws the network generated by the model."""

        node_colour_map = [self.node_type_colours[node_type(node)] for node in nodes.all_nodes()]

        # The following chunk of code draws the pretty branching processes
        edge_colour_map = [self.edge_type_colours[nodes.G.edges[edge]["edge_type"]] for edge in nodes.G.edges()]

        # Legend for explaining edge colouring
        proxies = [
            make_proxy(clr, lw=1) for clr in (
                default_edge_colour,
                contact_traced_edge_colour_within_house,
                contact_traced_edge_between_house,
                app_traced_edge,
                failed_contact_tracing
            )
        ]

        labels = (
            "Transmission, yet to be traced",
            "Within household contact tracing",
            "Between household contact tracing",
            "App traced edge",
            "Failed contact trace"
        )

        node_households = {}
        for node in nodes.all_nodes():
            node_households.update({node.node_id: node.household_id})

        # self.pos = graphviz_layout(self.G, prog='twopi')
        plt.figure(figsize=(10, 10))

        nx.draw(
            nodes.G,
            node_size=150, alpha=0.75, node_color=node_colour_map, edge_color=edge_colour_map,
            labels=node_households
        )
        plt.axis('equal')
        plt.title("Household Branching Process with Contact Tracing")
        plt.legend(proxies, labels)
